import React, { createContext, useReducer, useContext, ReactNode, Dispatch } from 'react';

interface LoaderState {
    isLoading: boolean;
}

type LoaderAction = { type: 'SHOW_LOADER' } | { type: 'HIDE_LOADER' };

const loaderReducer = (state: LoaderState, action: LoaderAction): LoaderState => {
    switch (action.type) {
        case 'SHOW_LOADER':
            return { isLoading: true };
        case 'HIDE_LOADER':
            return { isLoading: false };
        default:
            throw new Error(`Unhandled action type: ${action}`);
    }
};

export interface LoaderContextProps {
    isLoading: boolean;
    showLoader: () => void;
    hideLoader: () => void;
}

const LoaderContext = createContext<LoaderContextProps | undefined>(undefined);

export const LoaderProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
    const [state, dispatch] = useReducer(loaderReducer, { isLoading: false });

    const showLoader = () => dispatch({ type: 'SHOW_LOADER' });
    const hideLoader = () => dispatch({ type: 'HIDE_LOADER' });

    return (
        <LoaderContext.Provider value={{ isLoading: state.isLoading, showLoader, hideLoader }}>
            {children}
        </LoaderContext.Provider>
    );
};

export const useLoader = (): LoaderContextProps => {
    const context = useContext(LoaderContext);
    if (!context) {
        throw new Error('useLoader must be used within a LoaderProvider');
    }
    return context;
};
